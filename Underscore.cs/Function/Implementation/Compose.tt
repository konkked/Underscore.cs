<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Linq;

// This code has been automatically generated
// if you want to make changes make them on 
// the corresponding the text template file
// Compose.tt
namespace Underscore.Function
{

	public class ComposeComponent : IComposeComponent
	{

<#

    const string argNames = "abcdefghijklmnopqrstuvwxyz";
    const string resultTypeArg = "TResult";
    var methodName = "Apply";


    for (int i = 1; i < 17; i++)
    {
		var typeArgs = Enumerable.Range(1, i).Select(_ => "T").Concat(new[]{"TResult"}).ToArray();
        const string currTypeArgsString = "T, TResult";
        var fnSig = string.Format("Func<{0}>", string.Join(", ",typeArgs));
        const string retSig = "public TResult";

        var currSigArgs = string.Format("{0} function , T[] arguments ",fnSig);
        var applyArgs = Enumerable.Range(0, i).Select(j => "arguments[" + j + "]");
        var callApplyString = "function( " + string.Join(" , ", applyArgs) + " ) ";


		#>
		
        /// <summary>
        /// Calls a function using the passed array of arguments
        /// </summary>
		<#=retSig#> <#=methodName#><<#=currTypeArgsString#>>( <#=currSigArgs#> )
		{
			return <#=callApplyString#>;
		}
		
		<#
	}

    methodName = "Call";
	for (int i = 1; i < 17; i++)
	{
	    var typeArgs = Enumerable.Range(1, i).Select(j => "T" + j);
	    var arr = typeArgs as string[] ?? typeArgs.ToArray();
	    var memberArgs = arr.Zip(argNames, (l, r) => l + " " + r);
        
		typeArgs = arr.Concat(new[]{"TResult"}).ToArray();
	    var arr2 = typeArgs as string[] ;
	    var currTypeArgs = arr2.Take(i).Concat(new[] {resultTypeArg}).ToArray();
	    var currTypeArgsString = string.Join(", ", currTypeArgs);
        var fnSig = string.Format("Func<{0}>", string.Join(", ",arr2));
	    var argSig = string.Join(" ,", new[] {fnSig+" function"}.Concat(memberArgs));
        const string retSig = "public TResult";

	    var callSig = "function ( " + string.Join(", ", Enumerable.Range(0, i).Select(j => argNames[j].ToString())) + " ) ";
		
		#>
		
        /// <summary>
        /// Calls the function passed with the given arguments as the parameters 
        /// </summary>
		<#=retSig#> <#=methodName#><<#=currTypeArgsString#>>( <#=argSig#> )
		{
			return <#=callSig#>;
		}
		<#
	}

	methodName = "Compose";
    const string startType = "TStart";
    const string endType = "TResult";
    const string startVarName = "start";
    const string endVarName = "end";
    const string retvSig = "Func<TStart,TResult>";
	for (int i = 0; i < 16; i++)
	{
	    string[] typeArgs;
	    string[] currArgNames;

	    switch (i)
	    {
	        case 0:
	            typeArgs = new[] {startType,"TMid", endType};
	            currArgNames = new[] {startVarName, endVarName};
	            break;
	        case 1:
	            typeArgs = new[] {startType, "TLink1","TLink2", endType};
	            currArgNames = new[] {startVarName, "mid", endVarName};
	            break;
	        default:
	            typeArgs =
	                new[] {startType}.Concat(Enumerable.Range(1, i+1).Select(j => "TLink" + j))
	                    .Concat(new[] {endType})
	                    .ToArray();
	            currArgNames =
	                new[] {startVarName}.Concat(Enumerable.Range(0, i).Select(j => argNames[j].ToString()))
	                    .Concat(new[] {endVarName})
	                    .ToArray();
	            break;
	    }
	    var currArgsTypes =
	            Enumerable.Range(1, typeArgs.Length - 1)
	                .Select(j => string.Format("Func<{0},{1}>", typeArgs[j - 1], typeArgs[j]));
	        var memberArgs = currArgNames.Zip(currArgsTypes, (l, r) =>r+" "+l).ToArray();

	        var methodSig = string.Format("{0} {1}<{2}>({3})", retvSig, methodName, string.Join(", ", typeArgs),
	            string.Join(", ", memberArgs));

	    var callSig = "seed =>"+currArgNames.Aggregate("seed",(curr, next) => next+" ( " + curr+ " ) ");
		
		#>
		
        /// <summary>
        /// Transforms a chain of functions into a single function, 
		/// taking the parameter of the first function
		/// and returning the value from the invocation of the last function
        /// </summary>
		public <#=methodSig#>
		{
			return <#=callSig#>;
		}
		<#
	}
#>

	    /// <summary>
        /// Creates a composition of function taking the same result and input parameter
        /// </summary>
        public Func<T, T> Compose<T>( params Func<T, T>[ ] functions )
        {
            var targs = functions;

            if ( targs.FirstOrDefault( ) == null )
                return null;

            if ( targs.Skip( 1 ).FirstOrDefault( ) == null )
                return t => targs[ 0 ]( t );

            return ( t ) => targs.Aggregate( t, ( curr, next ) => next( curr ) );
        }

	}

}