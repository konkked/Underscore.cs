<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Underscore.Function
{
    public class CompactComponent : ICompactComponent
    {
	
<#

    var argNames = "abcdefghijklmnopqrstuvwxyz";
    var typeArgs = Enumerable.Range(1, 16).Select(i => "T" + i).ToArray();
    var resultTypeArg = "TResult";
    string callSigFormat = " {0} => function( {1} );";
    string callSigBody;
    const string callSigHead = "a";
    string callSig;
    for (int i = 2; i < 17; i++)
    {
        var currTypeArgs = typeArgs.Take(i).ToArray();
        var currTypeArgsString = string.Join(", ", currTypeArgs.Concat(new[] {resultTypeArg}));
        var callArgs = string.Join(", ", argNames.Take(i).ToString());
        var argSig = string.Format("Func<{0}> function", currTypeArgsString);
        string retSig;
        if (i < 8)
        {
            retSig = string.Format("Func<{0}>",
                string.Join(", ",
                    string.Format("Tuple<{0}>", string.Join(" , ", currTypeArgs)),
                    resultTypeArg
                    )
                );

            callSigBody = string.Join(",", Enumerable.Range(1, i).Select(a => string.Join(".", callSigHead , "Item" + a)));


        }
        else
        {
			var chunkIndexMax = ( i/4 )+1;
            var chunkEndPoint = 4*(chunkIndexMax - 1);
            var formattingObjs = Enumerable
							.Range(0, chunkIndexMax-1)
							.Select(idx => new
							{
							    TypeArg = 
									Enumerable.Range(1,4)
										.Zip(
											currTypeArgs.Skip(idx*4).Take(4).ToArray(),
											(a,b)=>new
											{
											    SubIndex="Item"+a, TypeArgs = b
											}) , 
								ArgSelectorName = "Item"+(idx+1)
							} ).ToArray();
		  retSig =
				string.Format("Func<Tuple<{0}>,TResult>",
					string.Join(", ",formattingObjs.Select(a=>string.Join(", ",
							string.Format(
								"Tuple<{0}>", string.Join(", ",a.TypeArg.Select(b=>b.TypeArgs).ToArray())
							))
					).Concat(currTypeArgs.Skip(chunkEndPoint)).ToArray())
				);

            callSigBody =
                string.Join(", ", formattingObjs.Select(
                    a => string.Join(", ",
                        a.TypeArg.Select(
                            b => string.Join(".", callSigHead, a.ArgSelectorName, b.SubIndex)
                        )
                    )
                ).Concat(
					Enumerable.Range(chunkIndexMax,i-chunkEndPoint)
					.Select(a=>string.Join(".",callSigHead,"Item"+ a))
				));



        }

        callSig = string.Format(callSigFormat, callSigHead, callSigBody);

		#>
		
		/// <summary>
        ///  Creates a new Function bound to the passed parameter
        /// </summary>
		public <#=retSig#> Pack<<#=currTypeArgsString #>>( <#=argSig#> )
		{
			return <#=callSig#>
		}
		
		<#
    }
#>

    }
}
