<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;

// This code has been automatically generated
// if you want to make changes make them on 
// the corresponding the text template file
// Boolean.tt
namespace Underscore.Function
{

	public interface IBooleanComponent
	{
	
<#

    var typeArgs = Enumerable.Range(1, 16).Select(i => "T" + i).ToArray();


    for (int i = 1; i < 18; i++)
    {
        var currTypeArgs = typeArgs.Take(i-1).ToArray();
        var currTypeArgsString = string.Join(", ", currTypeArgs);
        var fnRetType = string.Join(", ", currTypeArgs.Concat(new[]{"bool"}));
        
		if (!string.IsNullOrEmpty(currTypeArgsString)) 
		currTypeArgsString = "<" + currTypeArgsString + ">";

        #>
		
		/// <summary>
		/// Negates the logic of the passed function
		/// </summary>
		Func<<#=fnRetType#>> Negate<#=currTypeArgsString#>( Func<<#=fnRetType#>> fn);

		<#
	}

	for (int i = 1; i < 18; i++)
    {
        var currTypeArgs = typeArgs.Take(i-1).ToArray();
        var currTypeArgsString = string.Join(", ", currTypeArgs);
        var fnRetType = string.Join(", ", currTypeArgs.Concat(new[]{"bool"}));
        
		if (!string.IsNullOrEmpty(currTypeArgsString)) 
		currTypeArgsString = "<" + currTypeArgsString + ">";

        #>
		
		/// <summary>
		/// Creates an aggregate function that is a result of the passed functions being called and being 'or'ed together
		/// </summary>
		Func<<#=fnRetType#>> Or<#=currTypeArgsString#>( params Func<<#=fnRetType#>>[] fns);

		<#
	}

	for (int i = 1; i < 18; i++)
    {
        var currTypeArgs = typeArgs.Take(i-1).ToArray();
        var currTypeArgsString = string.Join(", ", currTypeArgs);
        var fnRetType = string.Join(", ", currTypeArgs.Concat(new[]{"bool"}));
        
		if (!string.IsNullOrEmpty(currTypeArgsString)) 
		currTypeArgsString = "<" + currTypeArgsString + ">";

        #>
		
		/// <summary>
		/// Creates an aggregate function that is a result of the passed functions being called and being 'and'ed together
		/// </summary>
		Func<<#=fnRetType#>> And<#=currTypeArgsString#>( params Func<<#=fnRetType#>>[] fns);

		<#
	}
#>

	}

}