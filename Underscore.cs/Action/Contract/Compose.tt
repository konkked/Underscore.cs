<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

// This code has been automatically generated
// if you want to make changes make them on 
// the corresponding the text template file
// Compose.tt
namespace Underscore.Action
{

	public interface IComposeComponent
	{

<#

    const string argNames = "abcdefghijklmnopqrstuvwxyz";
    var methodName = "Apply";


    for (int i = 1; i < 17; i++)
    {
		var typeArgs = Enumerable.Range(1, i).Select(_ => "T").ToArray();
        const string currTypeArgsString = "T";
        var fnSig = string.Format("Action<{0}>", string.Join(", ",typeArgs));
        const string retSig = "void";

        var currSigArgs = string.Format("{0} action , T[] arguments ",fnSig);
		
		#>
		
        /// <summary>
        /// Calls the passed action using the passed array of elements as it's parameters
        /// </summary>
		<#=retSig#> <#=methodName#><<#=currTypeArgsString#>>( <#=currSigArgs#> );
		
		<#
	}

    methodName = "Call";
	for (int i = 1; i < 17; i++)
	{
	    var typeArgs = Enumerable.Range(1, i).Select(j => "T" + j);
		var memberArgs = typeArgs.Zip(argNames, (l, r) => l + " " + r);
        
		typeArgs = typeArgs.ToArray();
        var currTypeArgs = typeArgs.Take(i).ToArray();
	    var currTypeArgsString = string.Join(", ", currTypeArgs);
        var fnSig = string.Format("Action<{0}>", string.Join(", ",typeArgs));
	    var argSig = string.Join(" ,", new[] {fnSig+" action"}.Concat(memberArgs));
        const string retSig = "void";

		
		#>
		
        /// <summary>
        /// Calls the action passed with the given arguments as the parameters 
        /// </summary>
		<#=retSig#> <#=methodName#><<#=currTypeArgsString#>>( <#=argSig#> );
		
		<#
	}

	methodName = "Compose";
    const string startType = "TStart";
    const string endType = "TEnd";
    const string startVarName = "start";
    const string endVarName = "end";
    const string retvSig = "Action<TStart>";
	for (int i = 0; i < 16; i++)
	{
	    string[] typeArgs;
	    string[] currArgNames;

	    switch (i)
	    {
	        case 0:
	            typeArgs = new[] {startType,endType, endType};
	            currArgNames = new[] {startVarName, endVarName};
	            break;
	        case 1:
	            typeArgs = new[] {startType, "TMid",endType, endType};
	            currArgNames = new[] {startVarName, "mid", endVarName};
	            break;
	        default:
	            typeArgs =
	                new[] {startType}.Concat(Enumerable.Range(1, i).Select(j => "TLink" + j))
	                    .Concat(Enumerable.Range(0,2).Select(_=>endType))
	                    .ToArray();
	            currArgNames =
	                new[] {startVarName}.Concat(Enumerable.Range(0, i).Select(j => argNames[j].ToString()))
	                    .Concat(new[] {endVarName})
	                    .ToArray();
	            break;
	    }

	    var currArgsTypes =
	            Enumerable.Range(1, typeArgs.Length - 1)
	                .Select(j => j==typeArgs.Length-1 ? string.Format("Action<{0}>",typeArgs[j]) : string.Format("Func<{0},{1}>", typeArgs[j - 1], typeArgs[j]));
	        string[] memberArgs = currArgNames.Zip(currArgsTypes, (l, r) =>r+" "+l).ToArray();

	        var methodSig = string.Format("{0} {1}<{2}>({3});", retvSig, methodName, string.Join(", ", typeArgs.Take(typeArgs.Length-1)),
	            string.Join(", ", memberArgs));



		
		#>
		
        /// <summary>
        /// Calls the function passed with the given arguments as the parameters 
        /// </summary>
		<#=methodSig#>
		
		<#
	}
#>
	    /// <summary>
        /// Creates a composition of actions, executed in order all sharing the same parameter
        /// </summary>
        Action<T> Compose<T>( params Action<T>[ ] actions );

	}

}