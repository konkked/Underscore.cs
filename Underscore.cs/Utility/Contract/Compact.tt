<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace Underscore.Utility
{
    public interface ICompactComponent
    {
	
<#

    const string argNames = "abcdefghijklmnopqrstuvwxyz";
    var typeArgs = Enumerable.Range(1, 16).Select(i => "T" + i).ToArray();


    for (int i = 2; i < 17; i++)
    {
        var currTypeArgs = typeArgs.Take(i).ToArray();
        var currTypeArgsString = string.Join(", ",currTypeArgs);
        var currArgNames = argNames.Take(i).Select(a=>a.ToString()).ToArray();
        var argSig = string.Join(", ", currTypeArgs.Zip(currArgNames, (a, b) => a + " " + b));
        string retSig;

        if (i < 8)
        {
            retSig = string.Format("Tuple<{0}>", string.Join(" , ", currTypeArgs));


        }
        else
        {
			var chunkIndexMax = ( i/4 )+1;
            var chunks = new Func<string[],string[][]>( 
				a=>Enumerable
						.Range(0, chunkIndexMax - 1)
						.Select(idx => a.Skip(idx*4).Take(4).ToArray())
						.ToArray()
			);
            var unchunked = new Func<string[], string[]>(a => a.Skip(4*(chunkIndexMax - 1)).ToArray());
			retSig =
				string.Format("Tuple<{0}>",
					string.Join(", ", chunks(currTypeArgs).Select(vals=>string.Format("Tuple<{0}>",String.Join(", ",vals)))
							.Concat(unchunked(currTypeArgs))
					)
				);

        }

		#>
		
		/// <summary>
        ///  Creates a tuple of objects segmented into Tuples of 4 
		///  for any argument count greater than 8, with the 
		///  remaining parameters being included at the end 
		///  of the tuple  
        /// </summary>
		<#=retSig#> Pack<<#=currTypeArgsString #>>( <#=argSig#> );
		
		<#
    }
#>

    }
}
